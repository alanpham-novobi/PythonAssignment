import unittest
from testUtils import TestOutput


class Testing(unittest.TestCase):
    # def testcase_x(self):
    #     inputData = """"""
    #     output = """"""
    #     number = 0
    #     self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    # Assignment's testcase
    def testcase_1(self):
        inputData = """172 4 5\n0 15"""
        output = """5"""
        number = 1
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_2(self):
        inputData = """172 4 0\n23 42"""
        output = """032"""
        number = 2
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_3(self):
        inputData = """145 1 1\n6 11"""
        output = """1"""
        number = 3
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_4(self):
        inputData = """172 4 0\n32 31"""
        output = """021"""
        number = 4
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_5(self):
        inputData = """812 10 0\n11 12 13 14 15 16 17 18 19 72"""
        output = """0123456791"""
        number = 5
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_6(self):
        inputData = """200 2 0\n28 20 29 8"""
        output = """0"""
        number = 6
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_7(self):
        inputData = """400 3 3\n17 13 10 47"""
        output = """33"""
        number = 7
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_8(self):
        inputData = """812 4 0\n13 14 19 18 55"""
        output = """9"""
        number = 8
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_9(self):
        inputData = """200 8 0\n27 24 93"""
        output = """3470"""
        number = 9
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    # Self testcase
    def testcase_10(self):
        inputData = """500 1 0\n2 3 4 5 6 7 9"""
        output = """0"""
        number = 10
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_11(self):
        inputData = """100 1 5\n11 65 0"""
        output = """"""
        number = 11
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_12(self):
        inputData = """360 2 2\n11 21 31 14 15 22 24 25 26 31 32 61 61 0"""
        output = """"""
        number = 12
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_13(self):
        inputData = """999 5 2\n11 21 31 51 61 61 15 26 0"""
        output = """21111"""
        number = 13
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_14(self):
        inputData = """999 9 5\n12 13 14 21 22 23 33 38 61 62 63 66 65 68 67\n35 39 33 38 61 62 63 21 22 23 24 31 32 33 33 34 0"""
        output = """52341233823658759312312341234"""
        number = 14
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_15(self):
        inputData = """999 9 5\n12 13 14 21 22 23 24 31 32 33 33 34 35 39 33 38 61 62 63 66 65 68 67\n35 39 33 38 61 62 63 66 65 68 67 12 13 14 21 22 23 24 31 32 33 33 34 0"""
        output = """5234123413345938126587593813658723413412334"""
        number = 15
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_16(self):
        inputData = """100 10 0\n19 72"""
        output = """11"""
        number = 16
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_17(self):
        inputData = """633 9 0\n19 17 73"""
        output = """100"""
        number = 17
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_18(self):
        inputData = """500 8 9\n19 19 29 39 19 19 78 78 77 76 79 75 0"""
        output = """10000042"""
        number = 18
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_19(self):
        inputData = """747 9 5\n18 28 74 16 26 28 77 65 66 71 72 73 0"""
        output = """5926761"""
        number = 19
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_20(self):
        inputData = """956 7 2\n11 12 21 25 28 34 35 39 71 75 78 65 69 66 72 71 75 33 39 74 79 0"""
        output = """"""
        number = 20
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_21(self):
        inputData = """500 5 5\n11 21 31 33 71 72 12 13 8 0"""
        output = """5111"""
        number = 21
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_22(self):
        inputData = """498 9 0\n21 8 8 0"""
        output = """0"""
        number = 22
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_23(self):
        inputData = """700 5 1\n31 8 72 72 72 65 8 0"""
        output = """"""
        number = 23
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_24(self):
        inputData = """640 6 4\n12 13 14 21 26 30 17 72 8 8 22 28 26 39 35 75 77 8 0"""
        output = """4234128707"""
        number = 24
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_25(self):
        inputData = """350 4 9\n11 12 21 25 28 34 8 35 39 71 75 8 78 65 69 66 72\n71 75 33 39 74 79 8 11 12 32 25 26 8 8 8 8 8 0"""
        output = """"""
        number = 25
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_26(self):
        inputData = """800 5 5\n11 12 21 25 28 35 48 0"""
        output = """51215"""
        number = 26
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_27(self):
        inputData = """495 7 1\n21 22 34 12 13 19 8 45"""
        output = """112423"""
        number = 27
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_28(self):
        inputData = """875 8 2\n21 25 34 34 36 13 14 18 44"""
        output = """2154463"""
        number = 28
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_29(self):
        inputData = """875 8 2\n12 15 19 25 26 24 34 38 64 8 71 72 75 32 39 34 17 15 49"""
        output = """2259572247"""
        number = 29
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_30(self):
        inputData = """996 7 3\n13 13 13 23 29 26 24 8 71 72 73 75 73 73 74 75\n34 38 64 8 71 72 75 32 33 43 33 34 17 15 49 0"""
        output = """"""
        number = 30
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_31(self):
        inputData = """412 5 3\n13 21 25 21 72 59"""
        output = """53"""
        number = 31
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_32(self):
        inputData = """865 2 5\n13 72 59 79 72 73 11 21 8 0"""
        output = """1"""
        number = 32
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_33(self):
        inputData = """745 4 8\n11 21 31 52 53 72 76 53 4 5 6 11 12 15 21 26 33 42 50 74 8 0"""
        output = """"""
        number = 33
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_34(self):
        inputData = """580 9 9\n28 33 45 20 10 5 6 3 12 13 15 7 8 72 73\n28 48 42 25 12 12 36 38 8 75 76 8 8 0"""
        output = """98350088822279"""
        number = 34
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_35(self):
        inputData = """945 10 9\n12 13 23 36 40 45 20 10 5 6 3 12 13 15 7 8 72 73\n28 48 42 30 35 25 12 17 36 38 8 75 76 8 8 0"""
        output = """923360500288820552779"""
        number = 35
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_36(self):
        inputData = """600 9 8\n11 12 13 21 23 91 92 93 0"""
        output = """313132182"""
        number = 36
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_37(self):
        inputData = """399 3 9\n8 93"""
        output = """3"""
        number = 37
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_38(self):
        inputData = """725 8 8\n13 15 27 33 42 43 63 8 93"""
        output = """8572"""
        number = 38
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_39(self):
        inputData = """423 8 8\n13 26 35 42 43 52 62 68 95 8 15 16 29 34 44 45 8 71 72 0"""
        output = """836232569448"""
        number = 39
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_40(self):
        inputData = """782 8 2\n15 25 34 48 49 56 62 67 94 8 11 13 28 36 41 42 8 73 76\n13 26 35 42 43 52 62 68 95 8 15 16 29 34 44 45 8 71 72 0"""
        output = """25589613862136523228569448"""
        number = 40
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_41(self):
        inputData = """111 9 3\n39 1 21 10 48 14 18 79 90 99 2 4 95 94 67 16 87 84 97 73 10 12 17\n24 97 20 77 64 28 14 18 76 71 2 46 63 83 68 77 71 67 0 48 37 94 58\n64 63 26 15 5 63 74 69 66 79 43 87 27 47 25 13 30 11 36 74 21 93 83\n36 1 32 18 79 80 25 34 13 24 77 53 60 14 90 92 1 27 54 27 22 81 20 6\n74 94 47 12 96 67"""
        output = """7472097539108579474556467"""
        number = 41
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_42(self):
        inputData = """999 10 8\n72 83 99 78 97 13 58 58 35 79 44 43 73 22 42 48 68 33 19\n79 55 80 91 74 81 91 60 79 32 21 57 58 24 94 26 64 55 72\n71 49 4 1 91 6 5 78 50 43 57 62 26 8 95 97 2 21 6 40 16 13\n76 97 67 66 97 52 42 89 11 76 44 22 41 60 22 23 36 36 23 19\n70 59 19 5 7 40 99 52 65 73 56 28 90 3 83 33 6 90 54 83 0"""
        output = """03909993663201247227960156273025871291584882264498391011648917767286804"""
        number = 42
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_43(self):
        inputData = """888 8 4\n69 97 14 84 1 34 54 2 27 60 28 33 64 8 79 19 83 55 81\n37 56 57 42 29 71 96 96 86 38 73 79 51 70 32 77 12 63\n85 23 48 60 27 54 9 26 13 1 78 75 85 59 5 37 20 70 20\n79 78 48 48 8 67 73 55 31 23 47 89 5 84 5 54 87 55 35\n66 33 3 65 57 89 34 978 68 44 79 15 97 73 88 13 10 1\n97 54 85 46 84 28 0"""
        output = """"""
        number = 43
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_44(self):
        inputData = """777 10 5\n23 28 83 57 77 44 42 90 72 45 70 49 89 77 58 16\n34 13 82 73 12 80 74 45 34 24 58 29 33 43 76 50\n1 31 7 19 90 53 90 45 98 91 33 66 27 50 2 68 22\n38 96 45 76 84 46 57 28 40 66 83 76 99 95 89 59\n86 80 858 87 67 9 45 6 27 92 69 23 41 25 82 47\n58 74 99 75 90 82 83 91 78 14 77 56 48 78 59 98\n68 45 81 49 66 88 10 31 7 81 15 50 64 86 66 7 66\n90 11 28 84 22 75 89 64 30 26 29 17 64 38 61 86\n97 55 39 63 41 32 30 13 14 88 72 23 13 96 18 67\n90 22 81 99 6 81 8 67 99 38 71 74 15 10 21 28 88\n46 96 39 39 23 95 86 21 67 54 50 30 84 3 93 11 88\n19 40 12 58 42 17 60 8 33 88 57 82 99 3 17 79 83 84 59 0"""
        output = """9730728209153999778718479604781896719775799218761203024493766864665448939019058367082865931582918596015046605931203633630350186617400469"""
        number = 44
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_45(self):
        inputData = """666 10 0\n26 72 57 63 93 30 60 27 3 49 4 13 82 11 55 15 55 42 2 7\n1 26 61 16 67 98 84 8 34 75 35 86 85 55 93 59 12 21 8 5\n9 2 11 3 46 71 99 16 12 24 19 21 88 56 41 3 31 39 1 98\n94 45 76 29 55 3 10 45 36 71 66 22 85 25 31 75 43 91 44\n63 54 66 15 31 17 19 29 29 31 21 31 60 11 92 98 5 79 24\n6 38 8 11 98 72 11 55 32 46 95 54 76 58 89 88 67 48 30\n87 48 42 52 61 84 67 19 32 17 79 38 56 31 75 56 41 82 56\n96 39 18 34 25 77 43 48 11 83 38 12 13 57 23 64 68 26 51\n42 17 49 18 77 37 22 95 71 89 99 48 93 9 27 5 59 47 56 15\n28 37 16 24 10 29 93 40 56 89 72 68 88 22 79 95 77 32 20 76\n53 15 9 40 43 10 78 0"""
        output = """5198038527508216843732818325895625102365267505919911619426355937800079315552616789211794434651799911102148190878082217936866616797976587641002635038"""
        number = 45
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_46(self):
        inputData = """852 9 3\n12 22 17 69 40 63 14 62 14 95 38 82 13 52 46 44 62 38\n55 99 44 93 5 58 69 5 38 3 7 99 62 55 91 1 99 81 45 61\n13 95 97 42 85 84 66 7 36 67 55 57 34 57 33 60 43 34 28\n7 4 54 30 87 3 7 55 98 38 46 73 71 67 96 7 98 29 2 25 31\n6 63 35 78 87 75 29 28 43 42 78 62 93 48 61 31 71 18 97\n87 97 8 57 34 90 13 68 15 60 56 80 10 73 28 27 16 59 31\n56 66 59 13 42 21 30 7 53 49 4 71 79 84 48 65 11 49 17\n25 83 92 36 96 83 23 35 21 5 82 57 10 38 86 87 33 69 61\n47 64 80 75 75 69 71 66 55 85 92 14 45 57 64 53 52 14 80\n14 95 60 84 94 69 17 90 26 52 79 88 38 9 33 62 52 24 68\n44 83 32 93 56 88 81 98"""
        output = """8607544237546047204898415967097998989824623832279034254325151526677473034840588812873850638769166321049851975235170391850652047183248423"""
        number = 46
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_47(self):
        inputData = """123 8 7\n99 94 25 56 83 16 86 32 58 98 34 87 88 13 90 29 68 54\n12 76 66 88 68 60 74 99 25 53 99 44 34 16 61 65 23 67 20\n86 59 49 56 81 85 55 78 96 76 19 51 52 77 66 99 2 88 98\n89 11 89 58 17 59 39 85 18 19 59 14 59 92 80 53 72 33 1 36 62 99 15 21 72 17 1 77 64 56 12 55 90 25 53 70 94 18 97 15 17 47 87 41 16 18 61 75 82 98 91 20 82 5\n33 18 53 92 11 22 59 62 27 53 16 11 28 34 99 44 96 29 42 88 65 97 49 12 82 63 74 19 60 75 30 98 46 80 13 23 22 14 28 26 45 86 12 33 78 6 27 43 70 95 2 41 17 23 83\n12 4 66 89 19 80 46 26 5 82 24 94 41 67 46 87 49 6 32 77 55 30 21 46 5 26 31 88 39 82 54 81 40 77 28 44 79 67 12 18 28 23 76 83 13 50 61 89 76 24 84 19 27 5 14 51\n71 49 8 3 94 37 3 89 54 4 70 36 20 81 78 32 54 45 69 73 97 77 8 64 5 25 41 76 30 23 17 48 95 51 73 92 38 52 34 7 22 90 71 52 38 96 38 56 45 29 17 97 13 35 58 22 94 38 72 22 4 97 2 38 84 11 77 6 80 66 61 28 18 25 82 35 93 38 56 25 20 5 28 13 34 11 54 97 67 60 82 17 1 74 71 5 74 68 86 88 48 53 99 70 10 14 23 35 73 35 98 64 27\n87 94 2 38 57 94 79 52 96 63 89 63 3 39 68 74 20 98 73 58 19 29 48 84 96 76 44 20 33 65 53 45 72 83 47 12 73 63 50 47 20 78 11 2 80 11 68 17 48 52 92 98 91 37 29 55 37 63 66 78 84 24 81 83 35 6 43 90 98 28 47 41 65 97 20 13 23 99 19 78 57 81 41 8 31 93 90 34 89 40 11 7 66 9 63 37 41 29 86 23 74 42 43 51 12 77 39 28 77 82 49\n70 8 49 92 77 6 99 91 63 88 3 12 61 78 17 41 79 21 95 9 26 80 93 36 49 72 96 7 97 18 94 48 94 98 30 51 27 64 66 7 45 43 72 24 92 36 8 9 41 35 24 65 45 30 15"""
        output = """"""
        number = 47
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_48(self):
        inputData = """456 10 9\n7 30 93 44 18 92 51 31 22 92 8 98 87 61 8 5 73 12 99 39 23 38 41 24 52 97 98 53 63 82 22 72 31 3 62 96 58 8 37 60 15 82 31 53 45 90 83 28 71 37 28 56 29 27 61 71 55 59 51 52 77 9 42 49 45 77 89 7 18 37 76 57 68 93 34 22 13 66 77 5 81 46 47 94 84 18 61 74 18 21 67 38 77 7 80 76 82 52 23 87 8 95 83 2 73 57 3 82 68 72 91 18 39\n51 46 49 13 21 31 49 17 66 94 52 89 64 81 70 81 1 66 73 53 75 81 77 92 25 65 77 67 73 83 43 45 39 29 81 51 44 7 93 81 76 91 68 21 62 78 24 20 38 81 86 37 42 35 75\n96 38 50 11 3 62 31 64 59 82 36 33 98 55 71 95 82 86 2 99 6 34 86 98 33 27 31 78 23 25 8 44 38 49 33 59 23 13 88 56 82 42 74 96 58 62 96 97 92 43 65 39 71 11 59 21 55 44 49 34 17 6 78 52 41 15 83 16 45 84 82 94 25 33 15 83 50 88 34 49 94 25 2 64 23 19 22 94 28 92 15 4 27 1 34 19 23 64 93 83 63 20 35 31 59 14 9 98 3 10 31 35\n26 1 51 18 58 79 99 40 30 6 44 30 35 74 77 85 6 33 53 29 25 49 81 38 65 85 6 97 40 79 45 10 98 68 85 12 53 14 26 54 12 41 47 53 12 96 48 98 57 42 57 39 24 59 27 57 34 18 48 57 18 4 30 79 30 82 73 48 70 2 34 25 58 89 82 63 92 19 67 35 95 12 36 22 18 27 66 60 23 32 96 46 36 44 53 91 2 91 95 28 10 88 93 86 85 32 77 44 60 21 16\n54 46 60 65 80 28 56 44 79 24 20 99 34 68 84 48 98 75 24 39 57 1 35 2 43 77 44 13 70 59 50 19 73 96 60 76 34 42 55 53 39 3 92 28 54 34 58 79 83 15 43 49 49 90 60 44 48 67 59 15 65 25 35 21 60 67 56 61 27 35 54 86 97 42 91 48 63 21 10 15 42 97 16 67 32 89 69 55 90 30 90 22 55 78 23 87 23 89 43 75 6 75 73 80 24 17 11 68 45"""
        output = """0072501387457167015555978402935246888430816230678262238548398788477949727623712464328758959336140084915032849405352628845660378040283419953036467911396198532191858387392039195279687962143372418398849031122429887051350424367780125058180121496389379354893933666736019154955215654543924574934301561979950888975566431594016460587341449760439126845753990216729503334647185"""
        number = 48
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_49(self):
        inputData = """789 10 2\n56 44 41 79 37 9 16 64 69 94 64 9 85 4 96 78 69 57 82 81 52 93 23 3 90 16 4 18 38 81 96 37 89 57 96 16 34 93 32 5 15 15 90 18 45 91 54 4 77 30 3 63 21 30 48 24 22 25 50 85 27 5 51 30 91 29 76 66 20 40 77 50 99 59 41 39 47 64 83 10 72 90 32 75 68 19 93 39 83 32 1 27 87 25 40 70 82 28 93 75 15 84 86 45 48 66 77 46 78 72 47 1 63 22 25 59 73 70 88 32 89 62 68 87 50 14 62 56 4 46 41 50 46 23 50 20 2 51 63 55 57 9 32 15 45 20 18 55 19 49 69 48 60 30 21 30 72 77 37 94 51 33 24 32 94 40 73 64 38 3 50 56 34 75 4 32 47 46 39 80 49 40 2 34 40 50 26 93 34 85 70 49 95 84 94 80 70 75 4 98 72 43 57 13 80 66 22 91 72 86 87 2 48 25 62 60 86 90 97 7 96 44 47 30 6 79 48 5 67 34 52 44 6 23 61 48 70 64 16 98 86 74 50 97 12 9 74 35 91 72 81 28 20 64 62 30 44 75 12 79 80 13 11 64 13 79 38 60 98 38 44 41 81\n52 27 16 67 59 34 94 59 2 46 80 81 28 36 7 89 92 65 65 6 76 41 29 24 67 91 19 41 39 85 41 20 50 4 90 39 5 69 64 31 43 36 25 82 46 71 94 27 13 87 66 84 91 64 1\n13 88 42 4 37 58 23 72 83 92 88 36 95 12 46 54 7 47 35 52 72 57 21 21 79 47 20 45 48 70 73 17 69 70 17 16 34 67 98 23 82 14 9 65 98 96 36 17 18 71 35 22 15 45\n3 1 18 72 40 68 74 23 64 98 88 64 39 30 14 77 43 16 60 76 49 99 19 23 30 68 51 28 32 15 20 70 2 57 33 12 56 30 81 89 69 46 84 49 63 73 64 89 70 89 11 2 51 42 37 97 83 72 40 3 84 60 59 43 79 19 85 89 38 70 51 4 16 2 32 52 67 53 85 14 53 27 73 71 39 95 97 3 77 9 91 50 65 65 89 10 84 78 23 28 87 78 71 37 94 46 54 2 17 45 35 89 13 10 89 26 77 12 2 81 59 48 11 63 58 97 61 4 39 39 3 97 48 22 58 24 84 28 20 57 58 74 55 75 25 85 34 30 14 7 76 51 33 2 26 5 11 12 13 89 53 68 34 18 94 5 16 6 32 82 5 7 14 90 29 12 47 60 28 78 91 87 82 30 39 88 76 10 15 98 95 81 23 96 74 1 10 49 89 82 35 5 90 73 55 23 99 15 96 65 71 92 26 24 59 71 39 70 40 54 23 42 77 47 20 18 29 31 14 56 70 88 98 85 9 88 8 69 25 2 5 73 11 75 81 34 94 97 77 24 14 22 85 16 26 33 68 43 24 94 4 3 10 61 87 25 99 95 21 71 51 34 92 71 38 81 58 11 12 10 82 96 77 23 5 7 84 75 95 10 2 4 90 77 90 40 12 45 95 34 29 22 13 60 83 80 37 51 25 9 43 6 48 1 69 51 78 70 54 64 63 78 50 27 31 38 79 96 77 43 24 95 32 57 47 25 17 4 99 29 21 23 13 21 56 14 81 82 37 59 99 50 20 27 85 76 84 75 80 93 5 16 86 20 79 5 78 7 50 69 57 80 28 54 6 22 67 22 34 96 77 93 22 41 62 87 98 30 61 46 84 52 19 64 54 29 90 5 21 20 53 10 40 46 47 48 71 29 31 83 71 85 14 90 23 46 91 24 48 68 82 82 21 93 80 54 20 43 77 54 67 14 17 68 8 29 84 42\n49 83 3 51 54 44 94 62 15 87 13 60 7 8 22 4 45 36 56 83 76 12 5 45 77 25 1 93 70 81 98 48 17 35 55 12 90 48 18 23 34 54 18 45 59 66 5 32 14 9 44 66 89 56 54 74 6 21 20 79 99 50 22 55 21 30 29 51 29 67 15 47 75 21 91 56 98 74 80 29 84 5 7 19 20 77 23 70 50 20 59 37 82 53 98 73 82 40 86 32 63 28 60 3 55 36 80 98 80 17\n19 77 97 35 90 67 85 35 72 69 1 80 25 79 44 6 82 76 60 86 97 39 51 99 48 57 96 34 95 47 63 53 15 40 91 68 12 43 60 70 72 20 47 47 48 16 73 63 31 57 94 86 78 75 45 74 42 97 5 22 85 53 19 43 11 40 2 66 23 82"""
        output = """72941533767870050877688379003799512679190152002557835232752035231884042997600301821264272487907799746133195432620006021886443836624415689693593850510426799147748550777211469690623705281803984321065259768543561637000191926869808251310124089001025801054243138057290247919101705248013011552677036426507650297236886643852560709789855946732622280426610630013572550859998001974348069276990400636373621747987424318468651841276794461194719941365744327852264754720706179764786491136701010298162273442021647553132981387828480830541013612338484927161909505665090439708914687015921499204923071538994510727627757901903016294490361410474789291444888344859624466819971023805685091945823207789317423931063"""
        number = 49
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))

    def testcase_50(self):
        inputData = """897 10 9\n75 50 50 3 41 25 49 10 47 87 87 28 35 46 90 43 94 93 1 60 71 65 79 75 52 47 25 31 98 49 18 60 36 98 78 85 30 29 46 92 64 38 45 94 53 17 45 23 40 87 46 71 33 55 75 23 43 15 29 91 49 17 14 93 11 72 7 59 30 82 79 79 84 66 47 21 51 33 69 17 3 63 48 46 40 70 4 73 7 97 14 32 76 12 81 75 42 24 85 40 19 87 2 37 64 85 12 12 37 88 56 6 78 20 67 49 48 47 48 60 39 87 28 31 93 11 61 39 59 54 60 28 53 16 22 12 17 95 15 36 76 83 24 37 40 99 33 76 80 37 12 95 44 72 88 88 73 96 81 79 7 80\n90 49 37 63 97 62 38 88 50 54 37 78 45 6 89 8 3 86 89 63 62 81 86 73 90 18 48 41 47 74 29 31 88 46 16 93 41 1 9 52 88 24 81 75 57 10 93 49 70 93 19 46 41 84 81 96 28 6 86 66 25 50 13 97 90 15 84 24 41 97 48 7 55 26 13 31 22 22 45 39 62 20 62 69 65 48 43 21 6 32 65 79 72 76 12 88 9 69 16 76 86 29 5 85 33 84 90 50 27 98 65 34 45 65 70 80 21 91 73 38 82 79 57 84 82 99 19 41 56 90 94 90 81 53 66 93 23 27 11 84 23 84 12 81 92 62 88 49 67 84 74 59 23 96 25 6 23 55 29 11 58 50 81 84 60 25 92 77 26 69 80 34 48 43 23 92 66 39 65 92 50 43 83 25 84 78 92 2 14 37 95 88 41 71 12 40 81 88 72 7 86 92 33 83 10 8 16 22 38 80 63 83 73 21 58 81 17 48 77 23 8 25 14 95 4 22 18 71 66 60 20 53 96 49 96 68 23 97 84 81 79 12 34 97 36 84 29 91 62 93 25 64 63 25 56 29 75 54 33 5 69 4 63 33 47 84 99 77 20 70 99\n8 96 37 35 74 8 49 92 22 26 8 72 78 15 56 2 51 76 16 77 75 31 96 3 55 74 93 66 3 69 29 56 8 56 11 24 44 10 60 25 67 72 43 43 40 22 40 2 28 95 76 69 1 6 88 21 4 66 90 30 86 20 13 92 77 31 97 92 46 66 24 12 97 73 20 70 3 60 95 26 71 46 43 60 74 50 26 96 29 62 43 13 40 71 43 40 95 38 58 16 85 53 70 29 15 65 63 25 41 70\n68 75 92 46 86 14 48 79 83 50 43 57 56 81 87 74 88 97 75 69 94 24 75 29 19 93 97 64 7 1 59 84 13 92 8 19 80 45 77 91 91 53 75 4 28 40 35 16 50 53 53 16 58 24 47 34 37 97 43 40 13 61 25 53 66 3 52 84 62 15 37 29 23 93 84 99 15 78 22 90 11 63 36 38 35 16 25 55 63 69 63 94 80 26 20 73 94 11 44 41 34 64 46 79 63 14 74 43 57 9 41 73 24 30 61 26 10 65 78 53 8 88 48 34 53 62 49 47 60 93 64 94 55 29 42 79 35 83 71 54 52 6 80 84 37 79 42 32 27 69 39 87 50 23 93 79 65 70 33 68 92 82 50 37 92 51 70 81 23 88 51 69 2 69 46 25 28 31 71 99 1 63 24 7 16 72 86 34 25 85 74 13 79 11 5 62 57 77 6 44 2 92 34 38 24 41 30 42 45 57 32 29 29 59 6 81 21\n7 21 28 16 10 9 21 59 72 74 61 19 32 16 92 59 42 77 93 81 16 41 48 36 71 56 86 71 78 76 89 31 83 19 60 10 16 3 31 70 38 5 89 57 65 56 19 53 2 99 11 80 77 5 85\n2 57 57 95 11 5 67 13 38 65 77 6 39 49 80 23 77 99 90 80 88 28 39 87 26 20 56 8 32 32 67 34 2 34 89 23 43 24 4 90 8 42 51 26 76 10 66 74 23 44 73 48 24 3 8 73\n54 94 61 15 82 10 21 67 95 62 52 41 6 52 27 36 68 37 52 10 38 21 84 92 31 33 31 22 92 42 42 68 57 60 51 70 75 82 28 83 49 47 17 52 34 10 65 12 73 2 40 21 5 65\n1 35 68 35 58 18 95 71 42 40 36 46 28 28 43 41 8 98 64 65 18 16 93 63 82 74 94 91 56 97 97 77 15 24 37 1 27 22 9 15 63 65 51 67 72 86 62 8 62 88 52 61 40 7 58\n66 69 88 55 94 86 51 87 71 73 86 193 185 200 256 856 741 94 75 75 34 77 26 9 50 10 0"""
        output = """45713685458858551055042779860782221802786721224478730122205778399244312058432703309972263461063079234833161044738355414143935565863197747486330650881208497325355936886604367724667176199929979003742506453588168260357425962500819535223173006191155450392032413859202952213658061693079210535508204379572263804991173683793117680419533047035732690625729243140015907856039806848549743487240974228407987809813624709969737882191663938650375417082779436330194369483320432222229600368376915435744393379636568816699661440059330208500325005923313056570380799934932130315362257934320634535382131996582948410257299911860251926261891190061875693917393000989606227443340150175131232066883187474547725351922210869651600"""
        number = 50
        self.assertTrue(TestOutput.checkOutput(inputData, output, number))


if __name__ == '__main__':
    unittest.main()
